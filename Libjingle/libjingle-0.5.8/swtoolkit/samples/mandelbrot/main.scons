# Copyright 2009, Google Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#     * Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following disclaimer
# in the documentation and/or other materials provided with the
# distribution.
#     * Neither the name of Google Inc. nor the names of its
# contributors may be used to endorse or promote products derived from
# this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# This main.scons file is the root description of the build specified in this
# directory and those under it. Individual components and the source files
# used to build them are described in subsidiary files called 'build.scons'.
#
# To build this project change the current directory to samples/mandelbrot.
# Then on Linux and MacOSX run ./hammer or on Windows run hammer.bat
#
# A number of command line options can be specified. For a full list, use the
# -h and -H command options.
#
# Some useful options include:
#   -h   :   Prints a list of which modules and build variants are available
#            in this project.
#   -H   :   Print SCons specific help. SCons is a build tool which this
#            project uses in tandem with the Software Construction Toolkit
#            to build.
#   -c   :   Clean the project. I.e. delete all build output.
#   -j3  :   Run up to 3 build steps at once.
#
# Some useful build targets include:
#    all_programs    :   Build all programs generated by this project.
#    all_libraries   :   Build all libraries generated by this project.
#    all_tests       :   Build all tests generated by this project.
#    run_all_tests   :   Build and run all tests generated by this project.
#
# Some examples:
#   Build all programs and libraries in debug mode:
#     hammer
#   Build and run all tests in debug mode on windows:
#     hammer MODE=dbg-win run_all_tests
#   Build all programs in optimized mode on linux:
#     hammer MODE=opt-linux all_programs
#   Build the mandelbrot_gen library in the default mode:
#     hammer mandelbrot_gen

# The hierarchy of build variants for this project:
#
# base
#    |
#    |-windows
#    |       |
#    |       |-windows_debug
#    |       |
#    |       |-windows_optimized
#    |
#    |-mac
#    |   |
#    |   |-mac_debug
#    |   |
#    |   |-mac_optimized
#    |
#    |-x11
#        |
#        |-x11_debug
#        |
#        |-x11_optimized

# Environments:
#   A SCons environment is used to describe the context in which to execute
#   build steps. It contains a number of environment variables that influence
#   how build steps happen. The commonalities between different build types
#   can be expressed by constructing an inheritance tree of environments.
#   Settings common between build types can be added at nodes closer to the
#   root of the tree.
#
#   Environments can be modified in a variety of ways.
#   When you use env.Clone(XYZ=abc), a deep copy of env is returned,
#   with the environment variable XYZ overwritten with abc.
#   When you do env.Replace(XYZ=abc), the environment variable XYZ in env is
#   overwritten with abc.
#   You can use env.Append(XYZ=[list]) or env.Prepend(XYZ=[list]) to append or
#   prepend to lists contained in an environment.
#   env.FilterOut(XYZ=[list]) can be used to remove elements from a list
#   contained in an environment.
#   Examples:
#     env.Append(CCFLAGS = ['/xyz'])  # Add the /xyz option when invoking CC.
#     env.Replace(CC = 'my-gcc')  # Use my-gcc instead of the default compiler.
#     env.Prepend(CPPPATH = ['xyz/include'])  # Add xyz/include to the front
#                                             # of the list of include paths.
#     env.FilterOut(LINKFLAGS = ['-bundle'])  # Remove -bundle from the list of
#                                             # linker command line flags.
#     my_env = env.Clone(LIBS = ['mine'])  # Create a clone of env in which
#                                          # programs only link with the 'mine'
#                                          # library.

# String Expansion:
#   SCons allows you to use a special syntax to expand variables lazily.
#   env.Append(CPPPATH = ['$XYZ_DIR/dir'])
#   Strings containing values begining with a '$' will be expanded right before
#   they are used. This allows you to express values and paths in a declarative
#   style. You can also use the '${XYZ_DIR}' syntax to avoid confusion between
#   variable names and regular text.

# Useful environment variables:
#   There are several predefined variables which can be useful:
#     MAIN_DIR = The directory containing this main.scons file
#     SOURCE_ROOT = The root directory of your scm client
#                   (on p4, the directory corresponding to //depot)
#     TARGET_ROOT = scons-out/$BUILD_TYPE
#     OBJ_ROOT = scons-out/$BUILD_TYPE/obj
#     LIBS_DIR = scons-out/$BUILD_TYPE/libs

# BUILD_TYPE and BUILD_GROUPS:
#   Each leaf environment in the tree above describes a build variant that
#   is actually build-able. As such, it must have a unique name specified in
#   the BUILD_TYPE environment variable. A list of all BUILD_TYPEs can be
#   obtained at the command line as part of the output of the -h option.
#   Each build type is required to have a description for the -h help text,
#   which is specified using the BUILD_TYPE_DESCRIPTION environment variable.
#
#   A build variant can belong to multiple groups. The list of groups a build
#   belongs to is specified using the BUILD_GROUPS environment variable.
#   All build variants are implicitly a member of the 'all' build group.
#
#   The MODE=<build-type-list> command line option can be used to select which
#   variants to build. The <build-type-list> comma separated list can contain
#   individual build types or groups. For example:
#     MODE=dbg-win          -->  build the windows debug variant
#     MODE=dbg-win,opt-win  -->  build the windows debug and optimized variants
#     MODE=all              -->  build all variants available on this host
#     MODE=default          -->  build all variants in the 'default' group
#
#   If no MODE= option is specified, the 'default' group is implied.

# BUILD_SCONSCRIPTS Usage:
#   The BUILD_SCONSCRIPTS environment variable should contain a list of paths
#   from the directory in which the main.scons file lives to the directory(s)
#   where each component's build.scons is located. SConscripts with names other
#   than 'build.scons' or SConscript can be listed by referring directly to
#   their full path, e.g. cross/other.scons.
#   Unless you have a specific reason, directories should contain a single
#   build.scons file.

# SCons Tools:
#   A 'tool' in the context of SCons is a python plugin. Theses plugins
#   reside either in the site_scons/site_tools directory under your project,
#   or are part of the common framework. Do not depend on the location of
#   the common tools, as it may change. Tools typically set or modify values
#   in an environment and add custom build actions. Each tool should only be
#   used once on any environment or its cloned descendants.
#
#   To invoke a tool do: env.Tool('tool_name').
#   As is usually the case with SCons parameters, you can also have a list of
#   tools.
#

# Create a base environment to describe what is common between platforms.
base_env = Environment()
# The 'component_setup' tool should be invoked on the base environment of
# all projects. It adds builders like ComponentProgram and ComponentLibrary.
# It also sets up global defaults.
base_env.Tool('component_setup')
base_env.Append(
    # All includes are relative to the main project directory.
    CPPPATH = ['$MAIN_DIR'],
    # The list of components common to all platforms (cross/build.scons).
    BUILD_SCONSCRIPTS = ['cross'],
)

# ----------------------------------------------------------

# Specialize the base environment for Windows using a tool.
windows_env = base_env.Clone()
# The 'target_platform_windows' tool customizes an environment for Windows.
windows_env.Tool('target_platform_windows')
windows_env.Append(
    # Add an extra windows specific component (win/build.scons).
    BUILD_SCONSCRIPTS = ['win'],
    # Add an extra windows specific flag.
    CCFLAGS = ['/EHsc'],
    # Link in some windows libraries.
    LIBS = [
        'user32',
        'gdi32',
    ],
)

# Create the leaf debug Windows environment.
windows_debug_env = windows_env.Clone(
    # Give this build a name and a description.
    BUILD_TYPE = 'dbg-win',
    BUILD_TYPE_DESCRIPTION = 'Windows debug build',
)
# Use common debug settings.
windows_debug_env.Tool('target_debug')
# Add this variant to the set that is build by default.
windows_debug_env.Append(BUILD_GROUPS = ['default'])

# Create the leaf optimized Windows environment.
windows_optimized_env = windows_env.Clone(
    # Give this build a name and a description.
    BUILD_TYPE = 'opt-win',
    BUILD_TYPE_DESCRIPTION = 'Windows optimized build',
)
# Use common optimized settings.
windows_optimized_env.Tool('target_optimized')

# ----------------------------------------------------------

# Specialize the base environment for the Mac using a tool.
# Environment variables listed as parameters to Clone, replace old values.
# You can also explicitly replace values using env.Replace().
mac_env = base_env.Clone()
# The 'target_platform_mac' tool customizes an environment for Mac OSX.
mac_env.Tool('target_platform_mac')
mac_env.Append(
    # Add a Mac specific component (mac/build.scons).
    BUILD_SCONSCRIPTS = ['mac'],
    # Link with the Cocoa framework.
    # Use of frameworks should be listed this way rather than with
    # LINKFLAGS = [['-framework', 'Cocoa']]
    FRAMEWORKS = ['Cocoa'],
)

# Create the leaf debug Mac environment.
mac_debug_env = mac_env.Clone(
    # Give this build a name and a description.
    BUILD_TYPE = 'dbg-mac',
    BUILD_TYPE_DESCRIPTION = 'MacOS debug build',
)
# Use common debug settings.
mac_debug_env.Tool('target_debug')
# Add this BUILD_TYPE to the set which is build by default.
mac_debug_env.Append(BUILD_GROUPS = ['default'])

# Create the leaf optimized Mac environment.
mac_optimized_env = mac_env.Clone(
    # Give this build a name and a description.
    BUILD_TYPE = 'opt-mac',
    BUILD_TYPE_DESCRIPTION = 'MacOS optimized build',
)
# Use common optimized settings.
mac_optimized_env.Tool('target_optimized')

# ----------------------------------------------------------

# Specialize the base environment for X11 using a tool.
# Environment variables listed as parameters to Clone, replace old values.
# You can also explicitly replace values using env.Replace().
x11_env = base_env.Clone()
# The 'target_platform_linux' tool customizes an environment for Linux.
x11_env.Tool('target_platform_linux')
x11_env.Append(
    # Add X11 specific component (x11/build.scons).
    BUILD_SCONSCRIPTS = ['x11'],
    # Explicitly allow this x11 variant to build on the Mac too. Since the Mac
    # supports X11.
    HOST_PLATFORMS = ['MAC'],
    # Link in the X11 library.
    LIBPATH = ['/usr/X11/lib'],
    LIBS = ['X11'],
)

# TODO: add a target_platform_posix, so this won't be needed.
if x11_env.subst('$PLATFORM') == 'darwin':
  x11_env['RPATH'] = ''

# Create the leaf debug X11 environment.
x11_debug_env = x11_env.Clone(
    # Give this build a name and a description.
    BUILD_TYPE = 'dbg-x11',
    BUILD_TYPE_DESCRIPTION = 'X11 debug build',
)
# Use common debug settings.
x11_debug_env.Tool('target_debug')
# Add this variant to the set which is build by default.
x11_debug_env.Append(BUILD_GROUPS = ['default'])

# Create the leaf optimized X11 environment.
x11_optimized_env = x11_env.Clone(
    # Give this build a name and a description.
    BUILD_TYPE = 'opt-x11',
    BUILD_TYPE_DESCRIPTION = 'X11 optimized build',
)
# Use common debug settings.
x11_optimized_env.Tool('target_optimized')

# ----------------------------------------------------------

# Build the variants listed above.
# This step will call each of the SConscripts (build.scons) listed,
# once for each variant currently being built.
BuildComponents([
    mac_debug_env,
    mac_optimized_env,
    windows_debug_env,
    windows_optimized_env,
    x11_debug_env,
    x11_optimized_env,
])
