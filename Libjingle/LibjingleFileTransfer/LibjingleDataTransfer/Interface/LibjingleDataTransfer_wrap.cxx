/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGJAVA
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes that proxy
 * method calls from C++ to Java extensions.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif

namespace Swig {
  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global;
        if (jobj)
          jthis_ = ((weak_global_ || !mem_own) ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj));
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java
       proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else { /* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0) {
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for 
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon((void **) &jenv_, NULL);
#else
        director_->swig_jvm_->AttachCurrentThread((void **) &jenv_, NULL);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.peek();
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };
}

#endif /* __cplusplus */


namespace Swig {
  namespace {
    jclass jclass_LibjingleDataTransferJNI = NULL;
    jmethodID director_methids[7];
  }
}

#include "../datatransferappproxy.h"


#include <string>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "LibjingleDataTransfer_wrap.h"

SwigDirector_ReceiverCallback::SwigDirector_ReceiverCallback(JNIEnv *jenv) : ReceiverCallback(), Swig::Director(jenv) {
}

SwigDirector_ReceiverCallback::~SwigDirector_ReceiverCallback() {
  swig_disconnect_director_self("swigDirectorDisconnect");
}


void SwigDirector_ReceiverCallback::onLoggedIn(std::string const nodeID) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jnodeID  ;
  
  if (!swig_override[0]) {
    ReceiverCallback::onLoggedIn(nodeID);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnodeID = jenv->NewStringUTF((&nodeID)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_LibjingleDataTransferJNI, Swig::director_methids[0], swigjobj, jnodeID);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ReceiverCallback::onLoggedOut(std::string const nodeID) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jnodeID  ;
  
  if (!swig_override[1]) {
    ReceiverCallback::onLoggedOut(nodeID);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnodeID = jenv->NewStringUTF((&nodeID)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_LibjingleDataTransferJNI, Swig::director_methids[1], swigjobj, jnodeID);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ReceiverCallback::onLoginFailed(std::string const nodeID, ErrorCode errCode, std::string const errDesc) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jnodeID  ;
  jint jerrCode  ;
  jstring jerrDesc  ;
  
  if (!swig_override[2]) {
    ReceiverCallback::onLoginFailed(nodeID,errCode,errDesc);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jnodeID = jenv->NewStringUTF((&nodeID)->c_str()); 
    jerrCode = (jint) errCode;
    jerrDesc = jenv->NewStringUTF((&errDesc)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_LibjingleDataTransferJNI, Swig::director_methids[2], swigjobj, jnodeID, jerrCode, jerrDesc);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ReceiverCallback::onDataReceived(char const *BYTE, size_t const len, std::string const remoteNodeID) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jbyteArray jBYTE = 0 ;
  jlong jlen  ;
  jstring jremoteNodeID  ;
  
  if (!swig_override[3]) {
    ReceiverCallback::onDataReceived(BYTE,len,remoteNodeID);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    //{
      jbyteArray jb = (jenv)->NewByteArray(strlen(BYTE));
      (jenv)->SetByteArrayRegion(jb, 0, strlen(BYTE), (jbyte*)BYTE);
      jBYTE = jb;
    //}
	
    jlen = (jlong) len;
    jremoteNodeID = jenv->NewStringUTF((&remoteNodeID)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_LibjingleDataTransferJNI, Swig::director_methids[3], swigjobj, jBYTE, jlen, jremoteNodeID);
	(jenv)->DeleteLocalRef(jb);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ReceiverCallback::onDataReceiveFailed(std::string const remoteNodeID, ErrorCode errCode, std::string const errDesc) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jremoteNodeID  ;
  jint jerrCode  ;
  jstring jerrDesc  ;
  
  if (!swig_override[4]) {
    ReceiverCallback::onDataReceiveFailed(remoteNodeID,errCode,errDesc);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jremoteNodeID = jenv->NewStringUTF((&remoteNodeID)->c_str()); 
    jerrCode = (jint) errCode;
    jerrDesc = jenv->NewStringUTF((&errDesc)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_LibjingleDataTransferJNI, Swig::director_methids[4], swigjobj, jremoteNodeID, jerrCode, jerrDesc);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ReceiverCallback::onDataSent(std::string const remoteNodeID) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jremoteNodeID  ;
  
  if (!swig_override[5]) {
    ReceiverCallback::onDataSent(remoteNodeID);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jremoteNodeID = jenv->NewStringUTF((&remoteNodeID)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_LibjingleDataTransferJNI, Swig::director_methids[5], swigjobj, jremoteNodeID);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ReceiverCallback::onDataSentFailed(std::string const remoteNodeID, ErrorCode errCode, std::string const errDesc) {
  JNIEnvWrapper swigjnienv(this) ;
  JNIEnv * jenv = swigjnienv.getJNIEnv() ;
  jobject swigjobj = (jobject) NULL ;
  jstring jremoteNodeID  ;
  jint jerrCode  ;
  jstring jerrDesc  ;
  
  if (!swig_override[6]) {
    ReceiverCallback::onDataSentFailed(remoteNodeID,errCode,errDesc);
    return;
  }
  swigjobj = swig_get_self(jenv);
  if (swigjobj && jenv->IsSameObject(swigjobj, NULL) == JNI_FALSE) {
    jremoteNodeID = jenv->NewStringUTF((&remoteNodeID)->c_str()); 
    jerrCode = (jint) errCode;
    jerrDesc = jenv->NewStringUTF((&errDesc)->c_str()); 
    jenv->CallStaticVoidMethod(Swig::jclass_LibjingleDataTransferJNI, Swig::director_methids[6], swigjobj, jremoteNodeID, jerrCode, jerrDesc);
    if (jenv->ExceptionCheck() == JNI_TRUE) return ;
  } else {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null upcall object");
  }
  if (swigjobj) jenv->DeleteLocalRef(swigjobj);
}

void SwigDirector_ReceiverCallback::swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global) {
  static struct {
    const char *mname;
    const char *mdesc;
    jmethodID base_methid;
  } methods[] = {
    {
      "onLoggedIn", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onLoggedOut", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onLoginFailed", "(Ljava/lang/String;Lcom/degoo/libjingle4j/proxy/ErrorCode;Ljava/lang/String;)V", NULL 
    },
    {
      "onDataReceived", "([BJLjava/lang/String;)V", NULL 
    },
    {
      "onDataReceiveFailed", "(Ljava/lang/String;Lcom/degoo/libjingle4j/proxy/ErrorCode;Ljava/lang/String;)V", NULL 
    },
    {
      "onDataSent", "(Ljava/lang/String;)V", NULL 
    },
    {
      "onDataSentFailed", "(Ljava/lang/String;Lcom/degoo/libjingle4j/proxy/ErrorCode;Ljava/lang/String;)V", NULL 
    }
  };
  
  static jclass baseclass = 0 ;
  
  if (swig_set_self(jenv, jself, swig_mem_own, weak_global)) {
    if (!baseclass) {
      baseclass = jenv->FindClass("com/degoo/libjingle4j/proxy/ReceiverCallback");
      if (!baseclass) return;
      baseclass = (jclass) jenv->NewGlobalRef(baseclass);
    }
    bool derived = (jenv->IsSameObject(baseclass, jcls) ? false : true);
    for (int i = 0; i < 7; ++i) {
      if (!methods[i].base_methid) {
        methods[i].base_methid = jenv->GetMethodID(baseclass, methods[i].mname, methods[i].mdesc);
        if (!methods[i].base_methid) return;
      }
      swig_override[i] = false;
      if (derived) {
        jmethodID methid = jenv->GetMethodID(jcls, methods[i].mname, methods[i].mdesc);
        swig_override[i] = (methid != methods[i].base_methid);
        jenv->ExceptionClear();
      }
    }
  }
}



#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_delete_1ReceiverCallback(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(ReceiverCallback **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onLoggedIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onLoggedIn(arg2);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onLoggedInSwigExplicitReceiverCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ReceiverCallback::onLoggedIn(arg2);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onLoggedOut(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onLoggedOut(arg2);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onLoggedOutSwigExplicitReceiverCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ReceiverCallback::onLoggedOut(arg2);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onLoginFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  ErrorCode arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (ErrorCode)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onLoginFailed(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onLoginFailedSwigExplicitReceiverCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  ErrorCode arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (ErrorCode)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ReceiverCallback::onLoginFailed(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onDataReceived(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jstring jarg4) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onDataReceived((char const *)arg2,arg3,arg4);
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onDataReceivedSwigExplicitReceiverCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jstring jarg4) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ReceiverCallback::onDataReceived((char const *)arg2,arg3,arg4);
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onDataReceiveFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  ErrorCode arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (ErrorCode)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onDataReceiveFailed(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onDataReceiveFailedSwigExplicitReceiverCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  ErrorCode arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (ErrorCode)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ReceiverCallback::onDataReceiveFailed(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onDataSent(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->onDataSent(arg2);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onDataSentSwigExplicitReceiverCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  (arg1)->ReceiverCallback::onDataSent(arg2);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onDataSentFailed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  ErrorCode arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (ErrorCode)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->onDataSentFailed(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1onDataSentFailedSwigExplicitReceiverCallback(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4) {
  ReceiverCallback *arg1 = (ReceiverCallback *) 0 ;
  std::string arg2 ;
  ErrorCode arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(ReceiverCallback **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (ErrorCode)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->ReceiverCallback::onDataSentFailed(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_new_1ReceiverCallback(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  ReceiverCallback *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (ReceiverCallback *)new SwigDirector_ReceiverCallback(jenv);
  *(ReceiverCallback **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1director_1connect(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jswig_mem_own, jboolean jweak_global) {
  ReceiverCallback *obj = *((ReceiverCallback **)&objarg);
  (void)jcls;
  SwigDirector_ReceiverCallback *director = dynamic_cast<SwigDirector_ReceiverCallback *>(obj);
  if (director) {
    director->swig_connect_director(jenv, jself, jenv->GetObjectClass(jself), (jswig_mem_own == JNI_TRUE), (jweak_global == JNI_TRUE));
  }
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_ReceiverCallback_1change_1ownership(JNIEnv *jenv, jclass jcls, jobject jself, jlong objarg, jboolean jtake_or_release) {
  ReceiverCallback *obj = *((ReceiverCallback **)&objarg);
  SwigDirector_ReceiverCallback *director = dynamic_cast<SwigDirector_ReceiverCallback *>(obj);
  (void)jcls;
  if (director) {
    director->swig_java_change_ownership(jenv, jself, jtake_or_release ? true : false);
  }
}


SWIGEXPORT jlong JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_new_1DataTransferAppProxy(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  DataTransferAppProxy *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (DataTransferAppProxy *)new DataTransferAppProxy();
  *(DataTransferAppProxy **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_delete_1DataTransferAppProxy(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  DataTransferAppProxy *arg1 = (DataTransferAppProxy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(DataTransferAppProxy **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_DataTransferAppProxy_1login(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jint jarg6) {
  DataTransferAppProxy *arg1 = (DataTransferAppProxy *) 0 ;
  std::string arg2 ;
  std::string arg3 ;
  std::string arg4 ;
  int arg5 ;
  int arg6 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataTransferAppProxy **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  (&arg3)->assign(arg3_pstr);
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  (arg1)->login(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_DataTransferAppProxy_1logout(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DataTransferAppProxy *arg1 = (DataTransferAppProxy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataTransferAppProxy **)&jarg1; 
  (arg1)->logout();
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_DataTransferAppProxy_1send(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jbyteArray jarg2, jlong jarg3, jstring jarg4) {
  DataTransferAppProxy *arg1 = (DataTransferAppProxy *) 0 ;
  char *arg2 = (char *) 0 ;
  size_t arg3 ;
  std::string arg4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataTransferAppProxy **)&jarg1; 
  {
    arg2 = (char *) jenv->GetByteArrayElements(jarg2, 0); 
  }
  arg3 = (size_t)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  (arg1)->send((char const *)arg2,arg3,arg4);
  {
    jenv->ReleaseByteArrayElements(jarg2, (jbyte *) arg2, 0); 
  }
  
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_DataTransferAppProxy_1setDebug(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  DataTransferAppProxy *arg1 = (DataTransferAppProxy *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataTransferAppProxy **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setDebug(arg2);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_DataTransferAppProxy_1setStunAndRelayInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3, jstring jarg4, jint jarg5) {
  DataTransferAppProxy *arg1 = (DataTransferAppProxy *) 0 ;
  std::string arg2 ;
  int arg3 ;
  std::string arg4 ;
  int arg5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataTransferAppProxy **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  (&arg2)->assign(arg2_pstr);
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  arg3 = (int)jarg3; 
  if(!jarg4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null std::string");
    return ;
  } 
  const char *arg4_pstr = (const char *)jenv->GetStringUTFChars(jarg4, 0); 
  if (!arg4_pstr) return ;
  (&arg4)->assign(arg4_pstr);
  jenv->ReleaseStringUTFChars(jarg4, arg4_pstr); 
  arg5 = (int)jarg5; 
  (arg1)->setStunAndRelayInfo(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_DataTransferAppProxy_1setReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  DataTransferAppProxy *arg1 = (DataTransferAppProxy *) 0 ;
  ReceiverCallback *arg2 = (ReceiverCallback *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(DataTransferAppProxy **)&jarg1; 
  arg2 = *(ReceiverCallback **)&jarg2; 
  (arg1)->setReceiver(arg2);
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_DataTransferAppProxy_1deleteReceiver(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  DataTransferAppProxy *arg1 = (DataTransferAppProxy *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataTransferAppProxy **)&jarg1; 
  (arg1)->deleteReceiver();
}


SWIGEXPORT jboolean JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_DataTransferAppProxy_1isReceiverInitialized(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  DataTransferAppProxy *arg1 = (DataTransferAppProxy *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(DataTransferAppProxy **)&jarg1; 
  result = (bool)(arg1)->isReceiverInitialized();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_degoo_libjingle4j_proxy_LibjingleDataTransferJNI_swig_1module_1init(JNIEnv *jenv, jclass jcls) {
  int i;
  
  static struct {
    const char *method;
    const char *signature;
  } methods[7] = {
    {
      "SwigDirector_ReceiverCallback_onLoggedIn", "(Lcom/degoo/libjingle4j/proxy/ReceiverCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ReceiverCallback_onLoggedOut", "(Lcom/degoo/libjingle4j/proxy/ReceiverCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ReceiverCallback_onLoginFailed", "(Lcom/degoo/libjingle4j/proxy/ReceiverCallback;Ljava/lang/String;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_ReceiverCallback_onDataReceived", "(Lcom/degoo/libjingle4j/proxy/ReceiverCallback;[BJLjava/lang/String;)V" 
    },
    {
      "SwigDirector_ReceiverCallback_onDataReceiveFailed", "(Lcom/degoo/libjingle4j/proxy/ReceiverCallback;Ljava/lang/String;ILjava/lang/String;)V" 
    },
    {
      "SwigDirector_ReceiverCallback_onDataSent", "(Lcom/degoo/libjingle4j/proxy/ReceiverCallback;Ljava/lang/String;)V" 
    },
    {
      "SwigDirector_ReceiverCallback_onDataSentFailed", "(Lcom/degoo/libjingle4j/proxy/ReceiverCallback;Ljava/lang/String;ILjava/lang/String;)V" 
    }
  };
  Swig::jclass_LibjingleDataTransferJNI = (jclass) jenv->NewGlobalRef(jcls);
  if (!Swig::jclass_LibjingleDataTransferJNI) return;
  for (i = 0; i < (int) (sizeof(methods)/sizeof(methods[0])); ++i) {
    Swig::director_methids[i] = jenv->GetStaticMethodID(jcls, methods[i].method, methods[i].signature);
    if (!Swig::director_methids[i]) return;
  }
}


#ifdef __cplusplus
}
#endif

