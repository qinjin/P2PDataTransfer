/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.4
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_LibjingleDataTransfer_WRAP_H_
#define SWIG_LibjingleDataTransfer_WRAP_H_

class SwigDirector_ReceiverCallback : public ReceiverCallback, public Swig::Director {

public:
    void swig_connect_director(JNIEnv *jenv, jobject jself, jclass jcls, bool swig_mem_own, bool weak_global);
    SwigDirector_ReceiverCallback(JNIEnv *jenv);
    virtual ~SwigDirector_ReceiverCallback();
    virtual void onLoggedIn(std::string const nodeID);
    virtual void onLoggedOut(std::string const nodeID);
    virtual void onLoginFailed(std::string const nodeID, ErrorCode errCode, std::string const errDesc);
    virtual void onDataReceived(char const *BYTE, size_t const len, std::string const remoteNodeID);
    virtual void onDataReceiveFailed(std::string const remoteNodeID, ErrorCode errCode, std::string const errDesc);
    virtual void onDataSent(std::string const remoteNodeID);
    virtual void onDataSentFailed(std::string const remoteNodeID, ErrorCode errCode, std::string const errDesc);
public:
    bool swig_overrides(int n) {
      return (n < 7 ? swig_override[n] : false);
    }
protected:
    bool swig_override[7];
};


#endif
